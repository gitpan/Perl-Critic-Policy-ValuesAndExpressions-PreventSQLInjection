## Double-quoted non-SQL string.
## failures 0
## cut

my $string = "Hello $world";

## name Single-quoted SQL string with an escaped variable.
## failures 0
## cut

my $sql = 'SELECT * FROM table WHERE $field = 1';

## name Single-quoted SQL string.
## failures 0
## cut

my $sql = 'SELECT * FROM table';

## name Double-quoted SQL string without interpolated variables.
## failures 0
## cut

my $sql = "SELECT * FROM table";

## name Double-quoted SQL string with an interpolated scalar.
## failures 1
## cut

my $sql = "SELECT * FROM $table";

## name Double-quoted SQL string with an interpolated array element.
## failures 1
## cut

my $sql = "SELECT * FROM $table[0] WHERE field = 'value'";

## name Double-quoted SQL string with an interpolated hash element.
## failures 1
## cut

my $sql = "SELECT * FROM $table{'name'}";

## name qq-quoted SQL string with an interpolated scalar.
## failures 1
## cut

my $sql = qq|
	SELECT *
	FROM $table
	WHERE $field = 'value'
|;

## name Double-quoted SQL string with multiple variables.
## failures 1
## cut

my $sql = "
	SELECT $field_name
	FROM $table
";

## name Double-quoted SQL string with multiple variables (whitelisted).
## failures 0
## cut

my $sql = "
	SELECT $field_name
	FROM $table
"; ## SQL safe ($field_name $table)

## name Double-quoted SQL string with multiple variables (partially whitelisted).
## failures 1
## cut

my $sql = "
	SELECT $field_name
	FROM $table
"; ## SQL safe ($table)

## name Double-quoted SQL string with a nested data structure.
## failures 1
## cut

my $sql = "
	SELECT $tables->{'table'}->{'fields'}->[0]
	FROM table
";

## name Double-quoted SQL string with a nested data structure (whitelisted).
## failures 0
## cut

my $sql = "
	SELECT $tables->{'table'}->{'fields'}->[0]
	FROM table
"; ## SQL safe ($tables->{'table'}->{'fields'}->[0])

## name Heredoc with multiple variables.
## failures 1
## cut

my $heredoc = <<__HERE__
	SELECT $field_name
	FROM $table
__HERE__

## name Double-quoted heredoc with multiple variables.
## failures 1
## cut

my $heredoc = <<"HERE"
	SELECT $field_name
	FROM $table
"HERE"

## name Single-quoted heredoc with multiple variables.
## failures 0
## cut

my $heredoc = <<'HERE'
	SELECT $field_name
	FROM $table
'HERE'

## name Heredoc with multiple variables (whitelisted).
## failures 0
## cut

my $heredoc = <<__HERE__; ## SQL safe ($field_name $table)
	SELECT $field_name
	FROM $table
__HERE__

## name Concatenated variable on multiple lines.
## failures 1
## cut

my $sql = 'SELECT * FROM '
	. $table
	. ' WHERE test = 1';

## name Concatenated variable.
## failures 1
## cut

my $sql = 'SELECT * FROM ' . $table;

## name Concatenated single-quoted strings.
## failures 0
## cut

my $sql = 'SELECT * ' . 'FROM table_name';

## name SQL-safe comments between concatenations (single comment).
## failures 0
## cut

my $sql = "SELECT $fields " . ## SQL safe ($fields)
	'FROM table_name';

## name SQL-safe comments between concatenations (multiple comments).
## failures 0
## cut

my $sql = "SELECT $fields " ## SQL safe ($fields)
	. "FROM $table_name"      ## SQL safe($table_name)
	. 'WHERE field = 1';

## name SQL-safe comments between concatenations (no interpolation in first string).
## failures 0
## cut

my $sql = "SELECT field2 "
	. "FROM $table_name" ## SQL safe($table_name)
	. 'WHERE field = 1';

## name Concatenation with a function call.
## failures 0
## cut

my $sql = "SELECT field2 "
	. "FROM "
	. get_table_name()
	. 'WHERE field = 1';

## name String as part of a list with variables in some list elements.
## failures 0
## cut
my ( $value ) = $dbh->selectrow_array( 'SELECT function(?)', undef, $input );
